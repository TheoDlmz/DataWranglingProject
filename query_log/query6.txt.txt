DROP TABLE IF EXISTS R_qtemp1
DROP TABLE IF EXISTS C_qtemp1
DROP TABLE IF EXISTS F_qtemp1
CREATE TABLE attributs_qtemp1 (old_att VARCHAR(255), new_att VARCHAR(255))
CREATE TABLE R_qtemp1 AS SELECT * FROM R_q2
INSERT INTO attributs_qtemp1 VALUE ("name","name_bis")
ALTER TABLE R_qtemp1 RENAME COLUMN name TO name_bis
INSERT INTO attributs_qtemp1 VALUE ("circonf","circonf_bis")
ALTER TABLE R_qtemp1 RENAME COLUMN circonf TO circonf_bis
CREATE TABLE C_qtemp1 AS SELECT tuple_id,A.new_att as attribut,lwid,value FROM C_q2 as C JOIN attributs_qtemp1 as A ON C.attribut = A.old_att 
CREATE TABLE F_qtemp1 AS SELECT tuple_id,A.new_att as attribut,cluster FROM F_q2 as F JOIN attributs_qtemp1 as A ON F.attribut = A.old_att 
DROP TABLE attributs_qtemp1
ALTER TABLE R_qtemp1 ADD PRIMARY KEY (id)
ALTER TABLE C_qtemp1 ADD PRIMARY KEY (tuple_id,attribut,lwid)
ALTER TABLE F_qtemp1 ADD PRIMARY KEY (tuple_id,attribut)
DROP TABLE IF EXISTS R_qtemp2
DROP TABLE IF EXISTS C_qtemp2
DROP TABLE IF EXISTS F_qtemp2
SHOW columns FROM R_q1
SHOW columns FROM R_qtemp1
CREATE TABLE new_id AS SELECT R1.id as id_1,R2.id as id_2 FROM R_q1 as R1, R_qtemp1 as R2
ALTER TABLE new_id ADD COLUMN id INT PRIMARY KEY NOT NULL AUTO_INCREMENT FIRST
ALTER TABLE new_id ADD KEY(id_1,id_2)
CREATE TABLE new_clusters AS SELECT F.cluster as id_1,1 as id_2 FROM F_q1 as F UNION SELECT F.cluster as id_1,2 as id_2 FROM F_qtemp1 as F
ALTER TABLE new_clusters ADD COLUMN id INT PRIMARY KEY NOT NULL AUTO_INCREMENT FIRST
ALTER TABLE new_clusters ADD KEY(id_1,id_2)
CREATE TABLE C_qtemp2 AS SELECT I.id as tuple_id,C.attribut,C.lwid,C.value FROM C_q1 AS C JOIN new_id I ON I.id_1 = C.tuple_id
INSERT INTO C_qtemp2 SELECT I.id as tuple_id,C.attribut,C.lwid,C.value FROM C_qtemp1 AS C JOIN new_id I ON I.id_2 = C.tuple_id
CREATE TABLE F_qtemp2 AS SELECT I.id as tuple_id,F.attribut,C.id as cluster FROM F_q1 AS F JOIN new_id I JOIN new_clusters as C ON I.id_1 = F.tuple_id AND C.id_1 = F.cluster WHERE C.id_2 = 1
INSERT INTO F_qtemp2 SELECT I.id as tuple_id,F.attribut,C.id FROM F_qtemp1 AS F JOIN new_id I JOIN new_clusters as C ON I.id_2 = F.tuple_id  AND C.id_1 = F.cluster WHERE C.id_2 = 2
CREATE TABLE R_qtemp2 AS SELECT I.id,R1.name,R1.hauteur,R1.circonf,R1.domanialite,R2.name_bis,R2.hauteur_cm,R2.circonf_bis,R2.developpement FROM new_id as I JOIN R_q1 as R1 JOIN R_qtemp1 as R2 ON I.id_1 = R1.id AND I.id_2 = R2.id order by I.id
DROP TABLE new_id
DROP TABLE new_clusters
ALTER TABLE R_qtemp2 ADD PRIMARY KEY (id)
ALTER TABLE C_qtemp2 ADD PRIMARY KEY (tuple_id,attribut,lwid)
ALTER TABLE F_qtemp2 ADD PRIMARY KEY (tuple_id,attribut)
DROP TABLE IF EXISTS R_qtemp1
DROP TABLE IF EXISTS C_qtemp1
DROP TABLE IF EXISTS F_qtemp1
CREATE TABLE R_qtemp1 AS SELECT * FROM (SELECT * FROM R_qtemp2 WHERE name <> name_bis UNION SELECT R.* FROM R_qtemp2 as R JOIN C_qtemp2 as C ON R.id = C.tuple_id WHERE (C.attribut = "name" AND value <> R.name_bis) OR (C.attribut="name_bis" AND R.name <> value) UNION SELECT DISTINCT R.* FROM R_qtemp2 as R JOIN C_qtemp2 as C1 JOIN C_qtemp2 as C2 JOIN F_qtemp2 as F1 JOIN F_qtemp2 as F2 ON C1.attribut = F1.attribut AND C1.tuple_id = F1.tuple_id AND C2.attribut = F2.attribut AND C2.tuple_id = F2.tuple_id AND R.id = C1.tuple_id AND R.id = C2.tuple_id WHERE C1.attribut = "name" AND C2.attribut = "name_bis" AND C1.value <> C2.value AND ((F1.cluster = F2.cluster AND C1.lwid = C2.lwid) OR F1.cluster <> F2.cluster)) as T ORDER BY id
CREATE TABLE C_qtemp1 AS SELECT * FROM C_qtemp2 WHERE tuple_id IN (SELECT id FROM R_qtemp1)
CREATE TABLE F_qtemp1 AS SELECT * FROM F_qtemp2 WHERE tuple_id IN (SELECT id FROM R_qtemp1)
ALTER TABLE R_qtemp1 ADD PRIMARY KEY (id)
ALTER TABLE C_qtemp1 ADD PRIMARY KEY (tuple_id,attribut,lwid)
ALTER TABLE F_qtemp1 ADD PRIMARY KEY (tuple_id,attribut)
REPLACE INTO C_qtemp1 SELECT C.tuple_id, C.attribut, C.lwid, NULL FROM C_qtemp1 as C JOIN R_qtemp1 as R ON R.id = C.tuple_id WHERE C.attribut = "name_bis" AND NOT(R.name <> C.value)
REPLACE INTO C_qtemp1 SELECT C.tuple_id, C.attribut, C.lwid, NULL FROM C_qtemp1 as C JOIN R_qtemp1 as R ON R.id = C.tuple_id WHERE C.attribut = "name" AND  NOT(C.value <> R.name_bis) 
CREATE TABLE close_clusters AS SELECT DISTINCT c1,c2 FROM (SELECT F1.tuple_id,F1.cluster as c1, F2.cluster as c2 FROM F_qtemp1 as F1 JOIN F_qtemp1 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "name" AND F2.attribut = "name_bis" AND F1.cluster < F2.cluster UNION SELECT F1.tuple_id,F2.cluster as c1, F1.cluster as c2 FROM F_qtemp1 as F1 JOIN F_qtemp1 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "name" AND F2.attribut = "name_bis" AND F2.cluster < F1.cluster) as T WHERE tuple_id IN (SELECT id FROM R_qtemp1)
CREATE TABLE clusters2merge AS WITH RECURSIVE clusters(c1,c2) AS (SELECT * FROM close_clusters UNION ALL SELECT clust1.c1,clust2.c2 FROM clusters as clust1 JOIN close_clusters as clust2 ON clust1.c2 = clust2.c1) SELECT min(c1) as c1,c2 FROM (SELECT c1,max(c2) as c2 FROM clusters GROUP BY c1) as T group by c2
DROP TABLE close_clusters
SELECT COUNT(*) FROM clusters2merge
DROP TABLE clusters2merge
REPLACE INTO C_qtemp1 SELECT C.tuple_id,C.attribut,C.lwid,NULL FROM C_qtemp1 as C JOIN (SELECT C1.tuple_id,C1.lwid FROM C_qtemp1 as C1 JOIN C_qtemp1 as C2 ON C1.tuple_id = C2.tuple_id AND C1.lwid = C2.lwid WHERE C1.attribut = "name" AND C2.attribut = "name_bis" AND not(C1.value <> C2.value) ) as T ON C.tuple_id = T.tuple_id AND C.lwid = T.lwid WHERE C.attribut = "name" OR C.attribut = "name_bis"
REPLACE INTO C_qtemp1 SELECT C1.tuple_id,C1.attribut,C1.lwid,NULL FROM C_qtemp1 as C1 JOIN F_qtemp1 as F1 JOIN F_qtemp1 as F2 JOIN C_qtemp1 as C2 ON C1.tuple_id = F1.tuple_id AND C1.attribut = F1.attribut AND C1.tuple_id = C2.tuple_id and C2.tuple_id = F2.tuple_id and C2.attribut = F2.attribut and F1.cluster = F2.cluster and C1.lwid = C2.lwid WHERE C1.value is not NULL and C2.value is NULL
DROP TABLE IF EXISTS R_qtemp2
DROP TABLE IF EXISTS C_qtemp2
DROP TABLE IF EXISTS F_qtemp2
CREATE TABLE R_qtemp2 AS SELECT * FROM (SELECT * FROM R_qtemp1 WHERE circonf = circonf_bis UNION SELECT R.* FROM R_qtemp1 as R JOIN C_qtemp1 as C ON R.id = C.tuple_id WHERE (C.attribut = "circonf" AND value = R.circonf_bis) OR (C.attribut="circonf_bis" AND R.circonf = value) UNION SELECT DISTINCT R.* FROM R_qtemp1 as R JOIN C_qtemp1 as C1 JOIN C_qtemp1 as C2 JOIN F_qtemp1 as F1 JOIN F_qtemp1 as F2 ON C1.attribut = F1.attribut AND C1.tuple_id = F1.tuple_id AND C2.attribut = F2.attribut AND C2.tuple_id = F2.tuple_id AND R.id = C1.tuple_id AND R.id = C2.tuple_id WHERE C1.attribut = "circonf" AND C2.attribut = "circonf_bis" AND 1*C1.value = 1*C2.value AND ((F1.cluster = F2.cluster AND C1.lwid = C2.lwid) OR F1.cluster <> F2.cluster)) as T ORDER BY id
CREATE TABLE C_qtemp2 AS SELECT * FROM C_qtemp1 WHERE tuple_id IN (SELECT id FROM R_qtemp2)
CREATE TABLE F_qtemp2 AS SELECT * FROM F_qtemp1 WHERE tuple_id IN (SELECT id FROM R_qtemp2)
ALTER TABLE R_qtemp2 ADD PRIMARY KEY (id)
ALTER TABLE C_qtemp2 ADD PRIMARY KEY (tuple_id,attribut,lwid)
ALTER TABLE F_qtemp2 ADD PRIMARY KEY (tuple_id,attribut)
REPLACE INTO C_qtemp2 SELECT C.tuple_id, C.attribut, C.lwid, NULL FROM C_qtemp2 as C JOIN R_qtemp2 as R ON R.id = C.tuple_id WHERE C.attribut = "circonf_bis" AND NOT(R.circonf = C.value)
REPLACE INTO C_qtemp2 SELECT C.tuple_id, C.attribut, C.lwid, NULL FROM C_qtemp2 as C JOIN R_qtemp2 as R ON R.id = C.tuple_id WHERE C.attribut = "circonf" AND  NOT(C.value = R.circonf_bis) 
CREATE TABLE close_clusters AS SELECT DISTINCT c1,c2 FROM (SELECT F1.tuple_id,F1.cluster as c1, F2.cluster as c2 FROM F_qtemp2 as F1 JOIN F_qtemp2 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "circonf" AND F2.attribut = "circonf_bis" AND F1.cluster < F2.cluster UNION SELECT F1.tuple_id,F2.cluster as c1, F1.cluster as c2 FROM F_qtemp2 as F1 JOIN F_qtemp2 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "circonf" AND F2.attribut = "circonf_bis" AND F2.cluster < F1.cluster) as T WHERE tuple_id IN (SELECT id FROM R_qtemp2)
CREATE TABLE clusters2merge AS WITH RECURSIVE clusters(c1,c2) AS (SELECT * FROM close_clusters UNION ALL SELECT clust1.c1,clust2.c2 FROM clusters as clust1 JOIN close_clusters as clust2 ON clust1.c2 = clust2.c1) SELECT min(c1) as c1,c2 FROM (SELECT c1,max(c2) as c2 FROM clusters GROUP BY c1) as T group by c2
DROP TABLE close_clusters
SELECT COUNT(*) FROM clusters2merge
CREATE TABLE merge1 AS SELECT C.tuple_id,C.attribut,C.lwid*T.lwid2 as lwid,C.value FROM C_qtemp2 as C JOIN F_qtemp2 as F JOIN (SELECT FT.cluster as c2,max(lwid)+1 as lwid2 FROM C_qtemp2 as CT JOIN F_qtemp2 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut GROUP BY c2) as T ON C.tuple_id = F.tuple_id AND C.attribut = F.attribut WHERE (F.cluster,T.c2) in (SELECT * FROM clusters2merge)
ALTER TABLE merge1 ADD KEY(tuple_id,attribut,lwid)
DELETE FROM C_qtemp2 WHERE (tuple_id,attribut) in (SELECT tuple_id,attribut FROM merge1)
INSERT INTO C_qtemp2 SELECT * FROM merge1
DROP TABLE merge1
CREATE TABLE merge2 AS SELECT C.tuple_id,C.attribut,C.lwid+lwid2 as lwid,C.value FROM C_qtemp2 as C JOIN F_qtemp2 as F JOIN (SELECT DISTINCT FT.cluster as c2,lwid as lwid2 FROM C_qtemp2 as CT JOIN F_qtemp2 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut AND lwid > 0) as T JOIN clusters2merge M ON M.c2 = T.c2 AND M.c1 = F.cluster  AND C.tuple_id = F.tuple_id AND C.attribut = F.attribut
ALTER TABLE merge2 ADD KEY(tuple_id,attribut,lwid)
INSERT INTO C_qtemp2 SELECT C.tuple_id,C.attribut,C.lwid+lwid2 as lwid,C.value FROM C_qtemp2 as C JOIN F_qtemp2 as F JOIN (SELECT DISTINCT FT.cluster as c2,lwid as lwid2 FROM C_qtemp2 as CT JOIN F_qtemp2 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut WHERE lwid > 0) as T JOIN clusters2merge as M ON M.c1 = T.c2 AND M.c2 = F.cluster AND C.tuple_id = F.tuple_id AND C.attribut = F.attribut 
INSERT INTO C_qtemp2 SELECT * FROM merge2
DROP TABLE merge2
REPLACE INTO F_qtemp2 SELECT F1.tuple_id,F1.attribut,F2.c2 FROM F_qtemp2 as F1 JOIN clusters2merge as F2 ON F1.cluster = F2.c1
DROP TABLE clusters2merge
CREATE TABLE close_clusters AS SELECT DISTINCT c1,c2 FROM (SELECT F1.tuple_id,F1.cluster as c1, F2.cluster as c2 FROM F_qtemp2 as F1 JOIN F_qtemp2 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "circonf" AND F2.attribut = "circonf_bis" AND F1.cluster < F2.cluster UNION SELECT F1.tuple_id,F2.cluster as c1, F1.cluster as c2 FROM F_qtemp2 as F1 JOIN F_qtemp2 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "circonf" AND F2.attribut = "circonf_bis" AND F2.cluster < F1.cluster) as T WHERE tuple_id IN (SELECT id FROM R_qtemp2)
CREATE TABLE clusters2merge AS WITH RECURSIVE clusters(c1,c2) AS (SELECT * FROM close_clusters UNION ALL SELECT clust1.c1,clust2.c2 FROM clusters as clust1 JOIN close_clusters as clust2 ON clust1.c2 = clust2.c1) SELECT min(c1) as c1,c2 FROM (SELECT c1,max(c2) as c2 FROM clusters GROUP BY c1) as T group by c2
DROP TABLE close_clusters
SELECT COUNT(*) FROM clusters2merge
CREATE TABLE merge1 AS SELECT C.tuple_id,C.attribut,C.lwid*T.lwid2 as lwid,C.value FROM C_qtemp2 as C JOIN F_qtemp2 as F JOIN (SELECT FT.cluster as c2,max(lwid)+1 as lwid2 FROM C_qtemp2 as CT JOIN F_qtemp2 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut GROUP BY c2) as T ON C.tuple_id = F.tuple_id AND C.attribut = F.attribut WHERE (F.cluster,T.c2) in (SELECT * FROM clusters2merge)
ALTER TABLE merge1 ADD KEY(tuple_id,attribut,lwid)
DELETE FROM C_qtemp2 WHERE (tuple_id,attribut) in (SELECT tuple_id,attribut FROM merge1)
INSERT INTO C_qtemp2 SELECT * FROM merge1
DROP TABLE merge1
CREATE TABLE merge2 AS SELECT C.tuple_id,C.attribut,C.lwid+lwid2 as lwid,C.value FROM C_qtemp2 as C JOIN F_qtemp2 as F JOIN (SELECT DISTINCT FT.cluster as c2,lwid as lwid2 FROM C_qtemp2 as CT JOIN F_qtemp2 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut AND lwid > 0) as T JOIN clusters2merge M ON M.c2 = T.c2 AND M.c1 = F.cluster  AND C.tuple_id = F.tuple_id AND C.attribut = F.attribut
ALTER TABLE merge2 ADD KEY(tuple_id,attribut,lwid)
INSERT INTO C_qtemp2 SELECT C.tuple_id,C.attribut,C.lwid+lwid2 as lwid,C.value FROM C_qtemp2 as C JOIN F_qtemp2 as F JOIN (SELECT DISTINCT FT.cluster as c2,lwid as lwid2 FROM C_qtemp2 as CT JOIN F_qtemp2 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut WHERE lwid > 0) as T JOIN clusters2merge as M ON M.c1 = T.c2 AND M.c2 = F.cluster AND C.tuple_id = F.tuple_id AND C.attribut = F.attribut 
INSERT INTO C_qtemp2 SELECT * FROM merge2
DROP TABLE merge2
REPLACE INTO F_qtemp2 SELECT F1.tuple_id,F1.attribut,F2.c2 FROM F_qtemp2 as F1 JOIN clusters2merge as F2 ON F1.cluster = F2.c1
DROP TABLE clusters2merge
CREATE TABLE close_clusters AS SELECT DISTINCT c1,c2 FROM (SELECT F1.tuple_id,F1.cluster as c1, F2.cluster as c2 FROM F_qtemp2 as F1 JOIN F_qtemp2 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "circonf" AND F2.attribut = "circonf_bis" AND F1.cluster < F2.cluster UNION SELECT F1.tuple_id,F2.cluster as c1, F1.cluster as c2 FROM F_qtemp2 as F1 JOIN F_qtemp2 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "circonf" AND F2.attribut = "circonf_bis" AND F2.cluster < F1.cluster) as T WHERE tuple_id IN (SELECT id FROM R_qtemp2)
CREATE TABLE clusters2merge AS WITH RECURSIVE clusters(c1,c2) AS (SELECT * FROM close_clusters UNION ALL SELECT clust1.c1,clust2.c2 FROM clusters as clust1 JOIN close_clusters as clust2 ON clust1.c2 = clust2.c1) SELECT min(c1) as c1,c2 FROM (SELECT c1,max(c2) as c2 FROM clusters GROUP BY c1) as T group by c2
DROP TABLE close_clusters
SELECT COUNT(*) FROM clusters2merge
CREATE TABLE merge1 AS SELECT C.tuple_id,C.attribut,C.lwid*T.lwid2 as lwid,C.value FROM C_qtemp2 as C JOIN F_qtemp2 as F JOIN (SELECT FT.cluster as c2,max(lwid)+1 as lwid2 FROM C_qtemp2 as CT JOIN F_qtemp2 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut GROUP BY c2) as T ON C.tuple_id = F.tuple_id AND C.attribut = F.attribut WHERE (F.cluster,T.c2) in (SELECT * FROM clusters2merge)
ALTER TABLE merge1 ADD KEY(tuple_id,attribut,lwid)
DELETE FROM C_qtemp2 WHERE (tuple_id,attribut) in (SELECT tuple_id,attribut FROM merge1)
INSERT INTO C_qtemp2 SELECT * FROM merge1
DROP TABLE merge1
CREATE TABLE merge2 AS SELECT C.tuple_id,C.attribut,C.lwid+lwid2 as lwid,C.value FROM C_qtemp2 as C JOIN F_qtemp2 as F JOIN (SELECT DISTINCT FT.cluster as c2,lwid as lwid2 FROM C_qtemp2 as CT JOIN F_qtemp2 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut AND lwid > 0) as T JOIN clusters2merge M ON M.c2 = T.c2 AND M.c1 = F.cluster  AND C.tuple_id = F.tuple_id AND C.attribut = F.attribut
ALTER TABLE merge2 ADD KEY(tuple_id,attribut,lwid)
INSERT INTO C_qtemp2 SELECT C.tuple_id,C.attribut,C.lwid+lwid2 as lwid,C.value FROM C_qtemp2 as C JOIN F_qtemp2 as F JOIN (SELECT DISTINCT FT.cluster as c2,lwid as lwid2 FROM C_qtemp2 as CT JOIN F_qtemp2 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut WHERE lwid > 0) as T JOIN clusters2merge as M ON M.c1 = T.c2 AND M.c2 = F.cluster AND C.tuple_id = F.tuple_id AND C.attribut = F.attribut 
INSERT INTO C_qtemp2 SELECT * FROM merge2
DROP TABLE merge2
REPLACE INTO F_qtemp2 SELECT F1.tuple_id,F1.attribut,F2.c2 FROM F_qtemp2 as F1 JOIN clusters2merge as F2 ON F1.cluster = F2.c1
DROP TABLE clusters2merge
CREATE TABLE close_clusters AS SELECT DISTINCT c1,c2 FROM (SELECT F1.tuple_id,F1.cluster as c1, F2.cluster as c2 FROM F_qtemp2 as F1 JOIN F_qtemp2 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "circonf" AND F2.attribut = "circonf_bis" AND F1.cluster < F2.cluster UNION SELECT F1.tuple_id,F2.cluster as c1, F1.cluster as c2 FROM F_qtemp2 as F1 JOIN F_qtemp2 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.attribut = "circonf" AND F2.attribut = "circonf_bis" AND F2.cluster < F1.cluster) as T WHERE tuple_id IN (SELECT id FROM R_qtemp2)
CREATE TABLE clusters2merge AS WITH RECURSIVE clusters(c1,c2) AS (SELECT * FROM close_clusters UNION ALL SELECT clust1.c1,clust2.c2 FROM clusters as clust1 JOIN close_clusters as clust2 ON clust1.c2 = clust2.c1) SELECT min(c1) as c1,c2 FROM (SELECT c1,max(c2) as c2 FROM clusters GROUP BY c1) as T group by c2
DROP TABLE close_clusters
SELECT COUNT(*) FROM clusters2merge
DROP TABLE clusters2merge
REPLACE INTO C_qtemp2 SELECT C.tuple_id,C.attribut,C.lwid,NULL FROM C_qtemp2 as C JOIN (SELECT C1.tuple_id,C1.lwid FROM C_qtemp2 as C1 JOIN C_qtemp2 as C2 ON C1.tuple_id = C2.tuple_id AND C1.lwid = C2.lwid WHERE C1.attribut = "circonf" AND C2.attribut = "circonf_bis" AND not(C1.value = C2.value) ) as T ON C.tuple_id = T.tuple_id AND C.lwid = T.lwid WHERE C.attribut = "circonf" OR C.attribut = "circonf_bis"
REPLACE INTO C_qtemp2 SELECT C1.tuple_id,C1.attribut,C1.lwid,NULL FROM C_qtemp2 as C1 JOIN F_qtemp2 as F1 JOIN F_qtemp2 as F2 JOIN C_qtemp2 as C2 ON C1.tuple_id = F1.tuple_id AND C1.attribut = F1.attribut AND C1.tuple_id = C2.tuple_id and C2.tuple_id = F2.tuple_id and C2.attribut = F2.attribut and F1.cluster = F2.cluster and C1.lwid = C2.lwid WHERE C1.value is not NULL and C2.value is NULL
DROP TABLE IF EXISTS R_q6
DROP TABLE IF EXISTS C_q6
DROP TABLE IF EXISTS F_q6
CREATE TABLE attributs_q6 ( name VARCHAR(255))
INSERT INTO attributs_q6 VALUES ("id"),("name"),("name_bis"),("circonf"),("developpement"),("hauteur"),("hauteur_cm")
CREATE TABLE R_q6 AS SELECT id,name,name_bis,circonf,developpement,hauteur,hauteur_cm FROM R_qtemp2 
CREATE TABLE C_q6 AS SELECT * FROM C_qtemp2
CREATE TABLE F_q6 AS SELECT * FROM F_qtemp2
ALTER TABLE R_q6 ADD PRIMARY KEY (id)
ALTER TABLE C_q6 ADD PRIMARY KEY (tuple_id,attribut,lwid)
ALTER TABLE F_q6 ADD PRIMARY KEY (tuple_id,attribut)
INSERT INTO C_q6 SELECT C.tuple_id,C.attribut,max(lwid)+1,NULL FROM (SELECT DISTINCT C.tuple_id FROM F_qtemp2 as F JOIN C_qtemp2 as C ON C.attribut = F.attribut AND C.tuple_id = F.tuple_id WHERE C.tuple_id NOT IN (SELECT DISTINCT tuple_id FROM (SELECT cluster,count(distinct tuple_id) as n FROM F_qtemp2 as F GROUP BY cluster HAVING  n > 1) as T JOIN F_qtemp2 as F ON T.cluster = F.cluster) AND C.attribut not in (SELECT *  FROM attributs_q6) and C.value is NULL) as P JOIN C_qtemp2 as C ON P.tuple_id = C.tuple_id WHERE C.attribut IN (SELECT * FROM attributs_q6) AND (C.tuple_id,C.attribut) NOT IN (SELECT tuple_id,attribut FROM C_qtemp2 WHERE value is NULL) GROUP BY C.tuple_id,C.attribut
CREATE TABLE close_clusters AS SELECT DISTINCT F1.cluster as c1, F2.cluster as c2 FROM F_q6 AS F1 JOIN F_q6 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.cluster < F2.cluster AND F1.tuple_id in (SELECT DISTINCT tuple_id FROM (SELECT cluster,count(distinct tuple_id) as n FROM F_qtemp2 as F GROUP BY cluster HAVING  n > 1) as T JOIN F_qtemp2 as F ON T.cluster = F.cluster)
CREATE TABLE clusters2merge AS WITH RECURSIVE clusters(c1,c2) AS (SELECT * FROM close_clusters UNION ALL SELECT clust1.c1,clust2.c2 FROM clusters as clust1 JOIN close_clusters as clust2 ON clust1.c2 = clust2.c1) SELECT min(c1) as c1,c2 FROM (SELECT c1,max(c2) as c2 FROM clusters GROUP BY c1) as T group by c2
DROP TABLE close_clusters
SELECT COUNT(*) FROM clusters2merge
CREATE TABLE merge1 AS SELECT C.tuple_id,C.attribut,C.lwid*T.lwid2 as lwid,C.value FROM C_q6 as C JOIN F_q6 as F JOIN (SELECT FT.cluster as c2,max(lwid)+1 as lwid2 FROM C_q6 as CT JOIN F_q6 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut GROUP BY c2) as T ON C.tuple_id = F.tuple_id AND C.attribut = F.attribut WHERE (F.cluster,T.c2) in (SELECT * FROM clusters2merge)
ALTER TABLE merge1 ADD KEY(tuple_id,attribut,lwid)
DELETE FROM C_q6 WHERE (tuple_id,attribut) in (SELECT tuple_id,attribut FROM merge1)
INSERT INTO C_q6 SELECT * FROM merge1
DROP TABLE merge1
CREATE TABLE merge2 AS SELECT C.tuple_id,C.attribut,C.lwid+lwid2 as lwid,C.value FROM C_q6 as C JOIN F_q6 as F JOIN (SELECT DISTINCT FT.cluster as c2,lwid as lwid2 FROM C_q6 as CT JOIN F_q6 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut AND lwid > 0) as T JOIN clusters2merge M ON M.c2 = T.c2 AND M.c1 = F.cluster  AND C.tuple_id = F.tuple_id AND C.attribut = F.attribut
ALTER TABLE merge2 ADD KEY(tuple_id,attribut,lwid)
INSERT INTO C_q6 SELECT C.tuple_id,C.attribut,C.lwid+lwid2 as lwid,C.value FROM C_q6 as C JOIN F_q6 as F JOIN (SELECT DISTINCT FT.cluster as c2,lwid as lwid2 FROM C_q6 as CT JOIN F_q6 AS FT ON CT.tuple_id = FT.tuple_id AND CT.attribut = FT.attribut WHERE lwid > 0) as T JOIN clusters2merge as M ON M.c1 = T.c2 AND M.c2 = F.cluster AND C.tuple_id = F.tuple_id AND C.attribut = F.attribut 
INSERT INTO C_q6 SELECT * FROM merge2
DROP TABLE merge2
REPLACE INTO F_q6 SELECT F1.tuple_id,F1.attribut,F2.c2 FROM F_q6 as F1 JOIN clusters2merge as F2 ON F1.cluster = F2.c1
DROP TABLE clusters2merge
CREATE TABLE close_clusters AS SELECT DISTINCT F1.cluster as c1, F2.cluster as c2 FROM F_q6 AS F1 JOIN F_q6 as F2 ON F1.tuple_id = F2.tuple_id WHERE F1.cluster < F2.cluster AND F1.tuple_id in (SELECT DISTINCT tuple_id FROM (SELECT cluster,count(distinct tuple_id) as n FROM F_qtemp2 as F GROUP BY cluster HAVING  n > 1) as T JOIN F_qtemp2 as F ON T.cluster = F.cluster)
CREATE TABLE clusters2merge AS WITH RECURSIVE clusters(c1,c2) AS (SELECT * FROM close_clusters UNION ALL SELECT clust1.c1,clust2.c2 FROM clusters as clust1 JOIN close_clusters as clust2 ON clust1.c2 = clust2.c1) SELECT min(c1) as c1,c2 FROM (SELECT c1,max(c2) as c2 FROM clusters GROUP BY c1) as T group by c2
DROP TABLE close_clusters
SELECT COUNT(*) FROM clusters2merge
DROP TABLE clusters2merge
REPLACE INTO C_q6 SELECT C1.tuple_id,C1.attribut,C1.lwid,NULL FROM C_q6 as C1 JOIN F_q6 as F1 JOIN F_q6 as F2 JOIN C_q6 as C2 ON C1.tuple_id = F1.tuple_id AND C1.attribut = F1.attribut AND C1.tuple_id = C2.tuple_id and C2.tuple_id = F2.tuple_id and C2.attribut = F2.attribut and F1.cluster = F2.cluster and C1.lwid = C2.lwid WHERE C1.value is not NULL and C2.value is NULL
DELETE FROM C_q6 WHERE attribut not in (SELECT * FROM attributs_q6)
DELETE FROM F_q6 WHERE attribut not in (SELECT * FROM attributs_q6)
DROP TABLE attributs_q6